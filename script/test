#! /usr/bin/env bash

set -e

source script/env "$@"

# run tests
echo -e "\nüß™ ${BLUE}Running tests: $(date "+%H:%M:%S")${OFF}\n"

bundle exec bin/rspec spec/unit && rspec_exit=$? || rspec_exit=$?

total_coverage=$(cat "$DIR/coverage/total-coverage.txt")

# Extract required coverage percentage from the Ruby file
required_coverage=$(grep "REQUIRED_COVERAGE_PERCENTAGE" "$DIR/spec/unit/required_coverage_percentage.rb" | grep -o '[0-9]\+')

# Extract current coverage percentage (remove % sign if present)
current_coverage=$(echo "$total_coverage" | grep -o '[0-9]\+\(\.[0-9]\+\)\?')

# Compare coverage percentages
if (( $(echo "$current_coverage >= $required_coverage" | bc -l) )); then
  cov_exit=0
  echo -e "\n‚úÖ Total Coverage: ${GREEN}$total_coverage${OFF} (required: ${required_coverage}%)"
else
  cov_exit=1
  echo -e "\n‚ùå Total Coverage: ${RED}$total_coverage${OFF} (required: ${required_coverage}%)"
fi

echo ""
echo "---------------------------------------"
echo "üìä Summary Results"
echo "---------------------------------------"
echo ""

if [[ $rspec_exit == 0 ]]; then
  echo -e "‚úÖ ${GREEN}rspec:    exitcode=${rspec_exit}${OFF}"
else
  echo -e "‚ùå ${RED}rspec:    exitcode=${rspec_exit}${OFF}"
fi

if [[ $cov_exit == 0 ]]; then
  echo -e "‚úÖ ${GREEN}coverage: exitcode=${cov_exit}${OFF}"
else
  echo -e "‚ùå ${RED}coverage: exitcode=${cov_exit}${OFF}"
fi

[ "$rspec_exit" -gt 0 ] && exit 1
[ $cov_exit -gt 0 ] && exit 1

exit 0
