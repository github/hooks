#!/usr/bin/env ruby
# frozen_string_literal: true

# Development CLI script for the hooks framework

# Add lib directory to load path so we can require our code
lib_dir = File.expand_path("../lib", __dir__)
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

# Set bundle gemfile
ENV["BUNDLE_GEMFILE"] ||= File.expand_path("../Gemfile", __dir__)

require "bundler/setup"
require "optparse"
require "hooks"
require "yaml"

# CLI implementation
class HooksCLI
  def initialize
    @options = {
      config_file: "hooks.yaml",
      port: 4567,
      host: "0.0.0.0",
      environment: "development",
      threads: "5:5"
    }
  end

  def run(args = ARGV)
    # Handle version and help flags before parsing other options
    if args.include?("--version") || args.include?("-v")
      puts Hooks::VERSION
      exit
    end

    if args.include?("--help") || args.include?("-h") || args.include?("help")
      show_help
      exit
    end

    parse_options(args)

    case args.first
    when "start", nil
      start_server
    when "version"
      puts Hooks::VERSION
    else
      puts "Unknown command: #{args.first}"
      show_help
      exit 1
    end
  end

  private

  def parse_options(args)
    OptionParser.new do |opts|
      opts.banner = "Usage: hooks [command] [options]"

      opts.on("-c", "--config FILE", "Configuration file (default: hooks.yaml)") do |file|
        @options[:config_file] = file
      end

      opts.on("-p", "--port PORT", Integer, "Port to listen on (default: 4567)") do |port|
        @options[:port] = port
      end

      opts.on("-H", "--host HOST", "Host to bind to (default: 0.0.0.0)") do |host|
        @options[:host] = host
      end

      opts.on("-e", "--environment ENV", "Environment (default: development)") do |env|
        @options[:environment] = env
      end

      opts.on("-t", "--threads THREADS", "Puma thread pool size (default: 5:5)") do |threads|
        @options[:threads] = threads
      end

      opts.on("-h", "--help", "Show this help message") do
        show_help
        exit
      end

      opts.on("-v", "--version", "Show version") do
        puts Hooks::VERSION
        exit
      end
    end.parse!(args)
  end

  def start_server
    puts "Starting Hooks webhook server..."
    puts "Config file: #{@options[:config_file]}"
    puts "Host: #{@options[:host]}"
    puts "Port: #{@options[:port]}"
    puts "Environment: #{@options[:environment]}"
    puts "Threads: #{@options[:threads]}"
    puts

    # parse the configuration file
    if File.exist?(@options[:config_file])
      begin
        config = YAML.load_file(@options[:config_file])
      rescue Psych::SyntaxError => e
        puts "Error parsing configuration file: #{e.message}"
        exit 1
      end
    else
      puts "Configuration file #{@options[:config_file]} not found. Using defaults."
      config = {}
    end

    # Merge CLI options into config
    config.merge!({
      "host" => @options[:host],
      "port" => @options[:port],
      "environment" => @options[:environment],
      "threads" => @options[:threads]
    })

    # Build the application with framework-level config
    app = Hooks.build(config:)

    # Start the server with CLI options
    require "rack"
    require "rack/handler/puma"
    require "puma"

    Rack::Handler::Puma.run(
      app,
      Host: @options[:host],
      Port: @options[:port],
      Threads: @options[:threads],
      environment: @options[:environment]
    )
  rescue Interrupt
    puts "\nShutting down gracefully..."
    exit 0
  rescue => e
    puts "Error starting server: #{e.message}"
    puts e.backtrace if @options[:environment] == "development"
    exit 1
  end

  def show_help
    puts <<~HELP
      Hooks - A Pluggable Webhook Server Framework

      Usage:
        hooks [start]                       Start the webhook server (default)
        hooks version                       Show version information
        hooks help                          Show this help message

      Options:
        -c, --config FILE                   Configuration file (default: hooks.yaml)
        -p, --port PORT                     Port to listen on (default: 4567)
        -H, --host HOST                     Host to bind to (default: 0.0.0.0)
        -e, --environment ENV               Environment (default: development)
        -t, --threads THREADS               Puma thread pool size (default: 5:5)
        -h, --help                          Show this help message
        -v, --version                       Show version

      Examples:
        hooks                               Start server with default settings
        hooks start -p 8080                 Start server on port 8080
        hooks -c custom.yaml -e production  Start with custom config in production mode
        hooks -t 10:10                      Start with 10 threads
        hooks version                       Show version information

      For more information, see the README.md file.
    HELP
  end
end

# Run the CLI if this file is executed directly
if __FILE__ == $0
  HooksCLI.new.run
end
